/**
 * Creates a container for metadata collected at runtime.
 *
 * The container provides async-safe functions for extracting the gathered metadata, and for setting it.
 *
 */
export function createRuntimeMetadataContainer() {
    const raw = {
        sensitive: {},
        public: {},
    };
    return {
        addPublic: (data) => {
            Object.assign(raw.public, data);
        },
        addSensitive: (data) => {
            Object.assign(raw.sensitive, data);
        },
        getAllPublic: () => {
            return { ...raw.public };
        },
        getAllSensitive: () => {
            return { ...raw.sensitive };
        },
    };
}
const coreData = createRuntimeMetadataContainer();
export const { getAllPublic, getAllSensitive, addPublic, addSensitive } = coreData;
//# sourceMappingURL=metadata.js.map